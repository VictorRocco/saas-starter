from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import user_passes_test
from django.contrib.auth.models import User
from django.contrib import messages
from django.http import HttpResponse

def is_admin(user):
    """Check if user is an admin"""
    return user.is_authenticated and user.is_staff

@user_passes_test(is_admin)
def dashboard(request):
    """Admin dashboard view"""
    context = {
        'total_users': User.objects.count(),
        'active_users': User.objects.filter(is_active=True).count(),
        'staff_users': User.objects.filter(is_staff=True).count(),
    }
    return render(request, 'admin/dashboard.html', context)

@user_passes_test(is_admin)
def user_list(request):
    """User list view"""
    users = User.objects.all().order_by('-date_joined')
    return render(request, 'admin/user_list.html', {'users': users})

@user_passes_test(is_admin)
def user_create(request):
    """Create user view"""
    if request.method == 'POST':
        # Add user creation logic here
        messages.success(request, 'User created successfully!')
        return redirect('admin:user_list')
    return render(request, 'admin/user_form.html')

@user_passes_test(is_admin)
def user_edit(request, pk):
    """Edit user view"""
    user = get_object_or_404(User, pk=pk)
    if request.method == 'POST':
        # Add user update logic here
        messages.success(request, 'User updated successfully!')
        return redirect('admin:user_list')
    return render(request, 'admin/user_form.html', {'user': user})

@user_passes_test(is_admin)
def user_delete(request, pk):
    """Delete user view"""
    user = get_object_or_404(User, pk=pk)
    if request.method == 'POST':
        user.delete()
        messages.success(request, 'User deleted successfully!')
        return redirect('admin:user_list')
    return render(request, 'admin/user_confirm_delete.html', {'user': user})

@user_passes_test(is_admin)
def user_search(request):
    """HTMX endpoint for user search"""
    if request.htmx:
        query = request.GET.get('q', '')
        users = User.objects.filter(username__icontains(query))
        return render(request, 'admin/partials/user_list.html', {'users': users})
    return HttpResponse(status=400)

@user_passes_test(is_admin)
def user_filter(request):
    """HTMX endpoint for user filtering"""
    if request.htmx:
        is_active = request.GET.get('is_active')
        is_staff = request.GET.get('is_staff')
        users = User.objects.all()
        if is_active:
            users = users.filter(is_active=is_active == 'true')
        if is_staff:
            users = users.filter(is_staff == 'true')
        return render(request, 'admin/partials/user_list.html', {'users': users})
    return HttpResponse(status=400)

def index(request):
    return render(request, 'admin/index.html')